@page "/auth/change-password"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using CVU.CONDICA.Client.Constants;
@using CVU.CONDICA.Dto.UserManagement
@using CVU.CONDICA.Client.Services

@inject BlazorHttpClient httpClient;
@inject ILocalStorageService localStorage;
@inject NavigationManager navigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

    <MudTextField T="string"
                  Style="background-color: transparent; color: white"
                  @bind-Value="postModel.CurrentPassword"
                  Label="Parola Curenta"
                  Variant="Variant.Text"
                  InputType="InputType.Password"
                  Required="true"
                  RequiredError="Parola curentă este obligatorie!" />

    <MudTextField T="string"
                  Style="background-color: transparent; color: white"
                  @bind-Value="postModel.NewPassword"
                  Label="Parola Noua"
                  @ref="pwField1"
                  Variant="Variant.Text"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Parola nouă este obligatorie!" />

    <MudTextField T="string"
                  Style="background-color: transparent; color: white"
                  @bind-Value="postModel.ConfirmPassword"
                  Label="Confirmă Parola Nouă"
                  @ref="pwField1"
                  Variant="Variant.Text"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Parola nouă este obligatorie!" />

    <div class="d-flex align-center justify-space-between">
        <MudButton Variant="Variant.Filled" OnClick="ChangePasswordRequest" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Schimbă Parola</MudButton>
    </div>
</MudForm>


@code {
    private ChangePasswordDto postModel = new ChangePasswordDto();

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    public class Token
    {
        public string Jwt { get; set; }
    }

    private async Task ChangePasswordRequest()
    {
        var success = await httpClient.Post<ChangePasswordDto>($"{ApplicationEndpoints.Users}/change-password", postModel);

        if (success)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var userName = authState.User.Claims.Where(d => d.Type == "emailAddress").First().Value;

            var token = await httpClient.Post<object, Token>($"{ApplicationEndpoints.Users}/log-in", new { Email = userName, Password = postModel.NewPassword, BearerAuth = true });

            await localStorage.SetItemAsync("token", token.Jwt);

            navigationManager.NavigateTo("/", true);
        }


    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
}