@page "/auth/reset-password"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using CVU.CONDICA.Client.Constants;
@using CVU.CONDICA.Client.Services;
@using CVU.CONDICA.Dto.UserManagement;

@inject BlazorHttpClient httpClient;
@inject ILocalStorageService localStorage;
@inject NavigationManager navigationManager

<MudForm @ref="form" @bind-IsValid="@success">

    <MudTextField T="string"
                  Style="background-color: transparent; color: white"
                  @bind-Value="postModel.Email"
                  Label="Email"
                  Required="true"
                  Variant="Variant.Text"
                  RequiredError="Adresa de email este obligatorie!"
                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Adresa de email este nevalidă"})" />

    <MudButton OnClick="@(() => { navigationManager.NavigateTo("/auth/login"); StateHasChanged(); })" Color="Color.Primary" Class="ml-auto">Înapoi la Login</MudButton>
    <div class="d-flex align-center justify-space-between">
        <MudButton Variant="Variant.Filled" OnClick="ResetPasswordRequest" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Resetează parola</MudButton>
    </div>

</MudForm>


@code {
    LoginDto postModel = new LoginDto();

    bool success;

    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

    private async Task ResetPasswordRequest()
    {
        var successfull = await httpClient.Post<LoginDto>($"{ApplicationEndpoints.Users}/reset-password-code", postModel);

        if (successfull)
        {
            navigationManager.NavigateTo("/auth/login");
        }
    }
}