@using CVU.CONDICA.Client.Constants;
@using CVU.CONDICA.Client.Services;
@using CVU.CONDICA.Dto.Departments;

@inject BlazorHttpClient httpClient;

<MudForm @ref="form" @bind-IsValid="@success">
    <MudGrid>
        <MudItem xs="12">
            <MudTextField @bind-Value="Name" Label="Denumirea" Required="true" RequiredError="Denumirea este obligatorie!" Variant="Variant.Text"></MudTextField>
        </MudItem>
    </MudGrid>
    <MudButton StartIcon="@Icons.Material.Filled.Save" Disabled="@(!success)" Class="mt-5" Variant="Variant.Filled" OnClick="@Save" Color="Color.Primary">Salvează</MudButton>
</MudForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public bool? Check { get; set; }
    [Parameter]
    public Func<Task> Callback { get; set; }

    MudForm form;

    private bool success = false;

    private string Name { get; set; }

    private DepartmentDto department;

    protected async override Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            department = await httpClient.Get<DepartmentDto>($"{ApplicationEndpoints.Departments}/{Id}");

            Name = department.Name;
        }
    }

    private async Task Save()
    {
        bool isSuccessfull = false;

        if (!Id.HasValue)
        {
            var postModel = new CreateDepartmentDto(Name);

            var id = await httpClient.Post<CreateDepartmentDto, int>(ApplicationEndpoints.Departments, postModel);

            isSuccessfull = id != 0;

            Id = id;
        }
        else
        {
            var original = new EditDepartmentDto(department.Name);
            var edited = new EditDepartmentDto(Name);

            var model = Generics.GetDifferences<EditDepartmentDto>(original, edited);

            isSuccessfull = await httpClient.Patch<EditDepartmentDto>($"{ApplicationEndpoints.Departments}/{Id}", model);
        }

        if (isSuccessfull) Callback?.Invoke();
    }
}
