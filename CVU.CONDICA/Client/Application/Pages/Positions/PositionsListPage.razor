@page "/application/positions"

@using CVU.CONDICA.Client.Application.Pages.Positions.Components;
@using CVU.CONDICA.Client.Constants;
@using CVU.CONDICA.Client.Services;
@using CVU.CONDICA.Dto.Positions;

@inject BlazorHttpClient blazorHttpClient
@inject PaginationManager<PositionDto, PositionListQueryDto> pm;
@inject DialogsService dialogsService;

<PageTitle>Poziții</PageTitle>

<div class="d-flex justify-end flex-grow-1 gap-4">
    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" OnClick="() => OpenDialog()">Adaugă Poziție</MudButton>
</div>

<MudTable Items="@pm.Items" T="PositionDto" Hover="true" Class="mt-3" HorizontalScrollbar="true">
    <HeaderContent>
        <MudTh>Denumirea</MudTh>
        <MudTh>Numărul angajaților</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh>Acțiuni</MudTh>
    </HeaderContent>
    <RowTemplate Context="position">
        <MudTd>@position.Name</MudTd>
        <MudTd>@position.EmployeesNumber</MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTh>
            <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenDialog(position.Id)"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeletePosition(position.Id))"></MudIconButton>
        </MudTh>
    </RowTemplate>
</MudTable>

@if (pm.Items != null && pm.Items.Any())
{
    <MudGrid Class="mt-6">
        <MudItem xs="8">
            <MudPagination Color="Color.Primary" Count="@pm.PageDetails.TotalPages" Selected="@pm.PageDetails.CurrentPage" SelectedChanged="pm.PageChanged" />
        </MudItem>
        <MudItem xs="4">
            <MudText Align="Align.Right">Total articole filtrate: @pm.PageDetails.TotalCount</MudText>
        </MudItem>
    </MudGrid>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        pm.SetRequestUrl(ApplicationEndpoints.Positions);

        await pm.Search();

    }

    private void OpenDialog(int? id = null)
    {
        var callback = async () => { await pm.Search(); StateHasChanged(); };

        dialogsService.OpenCudDialog<ManagePositionPage>("Detalii poziție", id, callback);
    }

    private async Task DeletePosition(int id)
    {
        var item = pm.Items.Where(x => x.Id == id).FirstOrDefault();
        var callback = async () => { await pm.Search(); StateHasChanged(); };

        bool confirmed = await dialogsService.OpenConfirmationDialog($"Ești sigur ca doresți să stergi pozitia de {item.Name}?");

        if (!confirmed)
        {
            return;
        }

        bool successfull = false;

        successfull = await blazorHttpClient.Delete($"{ApplicationEndpoints.Positions}/{id}");

        if (successfull)callback?.Invoke();
    }
}
